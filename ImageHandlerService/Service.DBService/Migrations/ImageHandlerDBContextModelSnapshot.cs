// <auto-generated />
using System;
using Feature.DataBase.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Service.DBService.Migrations
{
    [DbContext(typeof(ImageHandlerDBContext))]
    partial class ImageHandlerDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.Entity.ImageGroupLoaderInfo", b =>
                {
                    b.Property<int>("ImageGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("LoaderId")
                        .HasColumnType("integer");

                    b.HasKey("ImageGroupId", "LoaderId");

                    b.ToTable("ImageGroupLoaderInfos");
                });

            modelBuilder.Entity("Core.Domain.Entity.ImageGroupTransferInfo", b =>
                {
                    b.Property<int>("ImageGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("TransferId")
                        .HasColumnType("integer");

                    b.HasKey("ImageGroupId", "TransferId");

                    b.ToTable("ImageGroupTransferInfos");
                });

            modelBuilder.Entity("Core.Domain.Entity.ImageGroupTransformInfo", b =>
                {
                    b.Property<int>("ImageGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("TransformId")
                        .HasColumnType("integer");

                    b.HasKey("ImageGroupId", "TransformId");

                    b.ToTable("ImageGroupTransformInfos");
                });

            modelBuilder.Entity("Core.Domain.Image", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Core.Domain.ImageGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ServiceInfoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ServiceInfoId");

                    b.ToTable("ImageGroups");
                });

            modelBuilder.Entity("Core.Domain.Loader.LoaderInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("LookDir")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModeDir")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("RepeatTime")
                        .HasColumnType("interval");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("LoaderInfos");
                });

            modelBuilder.Entity("Core.Domain.Service.ServiceInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Core.Domain.Transfer.TransferInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("SendDir")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TransferInfos");
                });

            modelBuilder.Entity("Core.Domain.Transform.TransformInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Width")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("TransformInfos");
                });

            modelBuilder.Entity("ImageGroupLoaderInfo", b =>
                {
                    b.Property<int>("ImageGroupsId")
                        .HasColumnType("integer");

                    b.Property<int>("LoaderInfosId")
                        .HasColumnType("integer");

                    b.HasKey("ImageGroupsId", "LoaderInfosId");

                    b.HasIndex("LoaderInfosId");

                    b.ToTable("ImageGroupLoaderInfo");
                });

            modelBuilder.Entity("ImageGroupTransferInfo", b =>
                {
                    b.Property<int>("ImageGroupsId")
                        .HasColumnType("integer");

                    b.Property<int>("TransferInfosId")
                        .HasColumnType("integer");

                    b.HasKey("ImageGroupsId", "TransferInfosId");

                    b.HasIndex("TransferInfosId");

                    b.ToTable("ImageGroupTransferInfo");
                });

            modelBuilder.Entity("ImageGroupTransformInfo", b =>
                {
                    b.Property<int>("ImageGroupsId")
                        .HasColumnType("integer");

                    b.Property<int>("TransformInfosId")
                        .HasColumnType("integer");

                    b.HasKey("ImageGroupsId", "TransformInfosId");

                    b.HasIndex("TransformInfosId");

                    b.ToTable("ImageGroupTransformInfo");
                });

            modelBuilder.Entity("Core.Domain.Image", b =>
                {
                    b.HasOne("Core.Domain.ImageGroup", "ImageGroup")
                        .WithMany("Images")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageGroup");
                });

            modelBuilder.Entity("Core.Domain.ImageGroup", b =>
                {
                    b.HasOne("Core.Domain.Service.ServiceInfo", null)
                        .WithMany("ImageGroups")
                        .HasForeignKey("ServiceInfoId");
                });

            modelBuilder.Entity("Core.Domain.Loader.LoaderInfo", b =>
                {
                    b.HasOne("Core.Domain.Service.ServiceInfo", "ServiceInfo")
                        .WithMany("LoaderInfos")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceInfo");
                });

            modelBuilder.Entity("Core.Domain.Transfer.TransferInfo", b =>
                {
                    b.HasOne("Core.Domain.Service.ServiceInfo", "ServiceInfo")
                        .WithMany("TransferInfos")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceInfo");
                });

            modelBuilder.Entity("Core.Domain.Transform.TransformInfo", b =>
                {
                    b.HasOne("Core.Domain.Service.ServiceInfo", "ServiceInfo")
                        .WithMany("TransformInfos")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceInfo");
                });

            modelBuilder.Entity("ImageGroupLoaderInfo", b =>
                {
                    b.HasOne("Core.Domain.ImageGroup", null)
                        .WithMany()
                        .HasForeignKey("ImageGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Loader.LoaderInfo", null)
                        .WithMany()
                        .HasForeignKey("LoaderInfosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImageGroupTransferInfo", b =>
                {
                    b.HasOne("Core.Domain.ImageGroup", null)
                        .WithMany()
                        .HasForeignKey("ImageGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Transfer.TransferInfo", null)
                        .WithMany()
                        .HasForeignKey("TransferInfosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImageGroupTransformInfo", b =>
                {
                    b.HasOne("Core.Domain.ImageGroup", null)
                        .WithMany()
                        .HasForeignKey("ImageGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Transform.TransformInfo", null)
                        .WithMany()
                        .HasForeignKey("TransformInfosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.ImageGroup", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Core.Domain.Service.ServiceInfo", b =>
                {
                    b.Navigation("ImageGroups");

                    b.Navigation("LoaderInfos");

                    b.Navigation("TransferInfos");

                    b.Navigation("TransformInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
